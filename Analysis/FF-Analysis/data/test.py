# encoding utf-8
# Python 3.5

"""
This script read data from .dta and .inf files generated by Pascal program used in the flight simulator
to plot the  orientation trace of flies of session 7 and session 8
and average time distribution of all sessions
"""
import os
import struct
import matplotlib.pyplot as plt
import numpy as np
from tkinter import Tk, filedialog

def b2i(bstr, s = 'h'):
    """convert byte string to numerical array"""    
    import struct
    return 'not even' if len(bstr)%2!=0 else [struct.unpack(s, 
           bstr[2*i:2*i+2])[0] for i in range(len(bstr)//2)]

def read_dta(dta):
    """read the dta file and return numerical array"""
    with open(dta, 'rb') as f:
        data  = f.read()
    return b2i(data)

def PI(lst, pt = 194): 
    """calculate PI from list, 194 pun with T"""
    pi0 = pi1 = 0
    for i in lst:#[:2400]:
        if 512 < abs(i)< 1536:
            pi0 += 1 
        else:
            pi1 += 1 # T area
    
    print('T and invT:\n',pi0,pi1)
    if pt == 194: # ==!=
        p = (pi0-pi1)/(pi0+pi1)
        print(p)
        return p
    else:
        p = (pi1-pi0)/(pi0+pi1)
        print(p)
        return p    

def plot_trace(x,da): ## TODO
    '''Plot the data from list da'''
    import matplotlib.pyplot as plt
    #x = range(len(da))
    plt.ion()
    plt.plot(x,da)
    plt.show()

def read_inf(inf): 
    """convert .INF to a dict, simple and enough to represent inf data 296
    inf =    record
    HeatedPattern  : char; # 0 1
    fly            : string[20]; 
    date,DayTime   : string[40]; # 23-39, 64-77
    remarks        : string[80]; 
    ExpType        : array[1..15] of str4; # 186-189 test, 191 4+1
    duration      : array[1..15] of integer;
    NofRecs,NofData,NofFiles: integer;
    ['Â', 8, 'f', 'l', 'y', ' ', 'h', 'e', 'r', 'e', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 'M', 'o', 'n', 'd', 'a', 'y', ' ', '2', '1', ' ', 'A', 'p', 'r', 'i', 'l', ' ', '2', '0', '1', '4', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, '2', '1', ' ', 'h', ' ', '4', '5', ' ', 'm', ' ', '4', '6', ' ', 's', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 'r', 'e', 'm', 'a', 'r', 'k', 's', ' ', 'h', 'e', 'r', 'e', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 't', 'e', 's', 't', 4, 't', 'e', 's', 't', 4, ' ', 't', 'r', ' ', 4, ' ', 't', 'r', ' ', 4, 't', 'e', 's', 't', 4, ' ', 't', 'r', ' ', 4, ' ', ' ', ' ', ' ', 4, 't', 'e', 's', 't', 4, 't', 'e', 's', 't', 4, ' ', ' ', ' ', ' ', 4, ' ', ' ', ' ', ' ', 4, ' ', ' ', ' ', ' ', 4, ' ', ' ', ' ', ' ', 4, ' ', ' ', ' ', ' ', 4, ' ', ' ', ' ', ' ', 15, 0, 30, 0, 60, 0, 'Z', 0, 'x', 0, 0, 0, 'x', 0, 'x', 0, 'x', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, '4', 8, 2, 0]
    ['Â', 8, 'f', 'l', 'y', ' ', 'h', 'e', 'r', 'e', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 'M', 'o', 'n', 'd', 'a', 'y', ' ', '2', '1', ' ', 'A', 'p', 'r', 'i', 'l', ' ', '2', '0', '1', '4', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, '2', '1', ' ', 'h', ' ', '4', '9', ' ', 'm', ' ', '2', '5', ' ', 's', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 'r', 'e', 'm', 'a', 'r', 'k', 's', ' ', 'h', 'e', 'r', 'e', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 't', 'e', 's', 't', 4, 't', 'e', 's', 't', 4, ' ', 't', 'r', ' ', 4, ' ', 't', 'r', ' ', 4, 't', 'e', 's', 't', 4, ' ', 't', 'r', ' ', 4, ' ', ' ', ' ', ' ', 4, 't', 'e', 's', 't', 4, 't', 'e', 's', 't', 4, ' ', ' ', ' ', ' ', 4, ' ', ' ', ' ', ' ', 4, ' ', ' ', ' ', ' ', 4, ' ', ' ', ' ', ' ', 4, ' ', ' ', ' ', ' ', 4, ' ', ' ', ' ', ' ', 15, 0, 30, 0, 60, 0, 'Z', 0, 'x', 0, 0, 0, 'x', 0, 'x', 0, 'x', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 'h', 16, 2, 0]
    2014年4月22日18:03:25 8 backspace  maybe avoid odd bytes                       14 20 DC4 (device control 1)                                                                                                                                              14 shift out                                                                                                                                           12 new page form feed                                                                                                                                                                                                                                                         end of transmission                                                                                                                                                                                                                                                                                                                                so integer = byte2*2**8+byte1    'Z' = 90 'x' =120     NofRec(s/m+15+30+60,90+120) NofData '4' =52, 'h'=104  NofFile:a,b                                         
    """
    def detr(d, tr = 0):
        """ remove all the trailing tr from list d:"""
        while d[-1]== tr:
            d.pop()
        return d

    with open(inf, 'rb') as f:
        inf = f.read()
    return{'HeatedPattern': inf[0], #'upright'if inf[0]==194 ┬,else 'UpsideDown',# char
           'fly':inf[2:22].decode('ascii'), # string[20]; @1: 8 BS backspace
           'date':inf[23:63].decode('ascii'), # string[40] @22: 20 DC4 (device control 1) 
           'DayTime': inf[64:104].decode('ascii'), # string[40] @63: 14 SO shift out 
           'remarks':inf[105:185].decode('ascii'), # string[80]  ##  @104: 12  FF (NP form feed, new page)
           'ExpType':[i.decode('ascii') for i in inf[185:260].split(b'\x04') if not i.decode('ascii') in ('',' '*4)], # array[1..15] of str4; +75 @185,190,..: each start with 4 EOT (end of transmission)
           'duration': detr(b2i(inf[260:290])),#array[1..15] of integer;
           'NofRecs':b2i(inf[290:292])[0],#integer
           'NofData': b2i(inf[292:294])[0], #integer
           'NofFiles': b2i(inf[294:296])[0]} #integer

def see_inf(inf):
    """print the inf"""
    infd = read_inf(inf)
    for i in infd:
        print(i,'\t',type(infd[i]),'\t',infd[i])
    
def read_pos(data, NoR = 6):
    """read_pos(data, NofRecs = 6) list -> list"""    
    trq = []
    pos = []
    px = 1
##    print('read_pos of data with NoR', len(data), NoR)
    for i in range(2*NoR): # 1200 * I or 2400 * I
        py = px+1200
        if i%2 == 0: 
            trq.extend(data[px: py])
##            print('added torq in the range:',px,py, len(data[px:py]))
        else: 
            pos.extend(data[px:py])
##            print('added posi in the range:',px,py, len(data[px:py]))
        px = py + 1
    return pos

# for single file a.dta
def read_psi(dta):
    """read position for a single data
    dta: DTA filename
    return: list of position list(-2048~2048)
    """
    name = dta[:-5]
    suffix = ['A','B', 'C', 'D','E']
    inf_name = []
    dta_name = []
    pos = []
    infa = read_inf(name + 'A.INF') 
    NofFiles = infa['NofFiles']
    ExpType = infa['ExpType']
    PunishmentPattern = infa['HeatedPattern']
    duration = infa['duration']
    for i in range(NofFiles):#TODO: file integrity test,case insensitive
        inf_name.append(name + suffix[i] + '.INF')
        dta_name.append(name + suffix[i] + '.DTA')
        inf = read_inf(inf_name[i])    
        NofRecs = inf['NofRecs']
        NofData = inf['NofData']
##        print(dta_name[i])
##        print('NofFiles:', NofFiles)
##        print('NofData:', NofData)
        datum = read_dta(dta_name[i])
        pos.extend( read_pos(datum, NoR = NofRecs))
    
##    print('read the pos off, all:', len(pos))
##    for i in range(NofFiles):##
##        print('dta and inf names:\n', dta_name[i],'\n',inf_name[i])
    
    NrPeriod = len(ExpType)
##    print('ExpType:', NrPeriod, ExpType, duration)##
    po = []
    start = 0
    for i in range(NrPeriod):
        end = start + duration[i]*20
        po.append(pos[start:end])
##        print('pos added the', i, 'th sessions:', len(pos[start:end]))
        start = end
    return po

def timedistr(lstpos):
    """return a list of time distribution,
    -2048..0..2047 -> 2048..4096.0..2047 or 0-4096 overall
    -2048..2048 ~ -180~180 with the T center at 0
    so to get back: i - 4096 if i > 2047
    against the position
    """
    #pos360 = [int(360*i/4096) for i in lstpos]
##    import numpy as np
    
    times = [0] * 4096 
    for i in lstpos:
        times[i] += 1
    return times

def plot_trace2(y, barw=24, barp=45, pun=None, figfile='new.eps',content='trace', show=False):
    """plot the (position) data barw(idth), barp(sition), figfile as figure filename, content trace or diagram """
    import numpy as np
    import matplotlib.pyplot as plt
    print('figfile:', figfile)
       
    plt.close()
    if show:
        plt.ion()
    fig = plt.figure(figsize=(6,1.3),dpi = 222)
    
    #plt.plot(x,z,"b--",label="$cos(x^2)$")
    if content == 'time':
        y = np.array(y)
        leny = len(y)
        print(leny)
        y = np.concatenate((y[leny//2:],y[:leny//2])) # x = np.array(range(-leny//2,0,-1)) + np.array(range(leny//2)) ValueError: operands could not be broadcast together with shapes (0,) (2048,) 
        y = y/20.0
        x = np.concatenate((np.arange(-leny//2,0,1), np.arange(leny//2))) # y = np.concatenate(y[leny//2:],y[:leny//2]) TypeError: only length-1 arrays can be converted to Python scalars
        x = x*360.0/4096
        print(len(x))
        plt.xlabel("position [°]", size=10, weight='bold')
        plt.ylabel("time [s]", size=10, weight='bold')
        plt.title("Time distribution")
        plt.xlim(-180,179)
        ylmt = 0.2
        plt.ylim(0, ylmt)
        plt.xticks(np.arange(-180, 180, 90), size=10)
        plt.yticks(np.arange(0, 0.2, 0.05),family='arial', fontsize=10, weight='normal',rotation=0) #  style='italic',

        plt.fill([barp - barw/2,barp - barw/2,barp + barw/2,barp + barw/2], [0, 1, 1, 0], color='0.3')  # vertical bar 1
        plt.fill([barp-180 - barw/2,barp-180 - barw/2,barp-180 + barw/2,barp -180 + barw/2], [0, 1, 1, 0], color='0.3')  # vertical bar 1       
##        plt.fill_between(x, barp - 180 - barw/2, barp - 180 + barw/2, lw=0.5, edgecolor='0.3', facecolor='0.3' )
        
        #32*9
##        for ii in range(9):  # checkerboard pattern
##            for jj in range(32):
##                if(ii+jj)%2==0:
##                    plt.fill([-180+jj*360/32,-180+jj*360/32, -180+(jj+1)*360/32, -180+(jj+1)*360/32],[ii*ylmt/9,(ii+1)*ylmt/9, (ii+1)*ylmt/9, ii*ylmt/9], color='0.3')      
        if pun=='TaS':           
            plt.fill_between(x[4096/8:4096*3/8], 0, ylmt, hatch="x", edgecolor="m", facecolor='none',linewidth=0.0) #color="none",
            plt.fill_between(x[4096*5/8:4096*7/8], 0, ylmt, hatch="x", edgecolor="m", facecolor='none',linewidth=0.0) #color="none",            
        elif pun=='TaP':
            plt.fill_between(x[0:4096/8], 0, ylmt, hatch="x", edgecolor="m", facecolor='none',linewidth=0.0) #color="none",
            plt.fill_between(x[4096*3/8:4096*5/8], 0, ylmt, hatch="x", edgecolor="m", facecolor='none',linewidth=0.0) #color="none",
            plt.fill_between(x[4096*7/8:4096], 0, ylmt, hatch="x", edgecolor="m", facecolor='none',linewidth=0.0) #color="none",
        else:
            pass
        plt.vlines(-135, 0, 1, lw=0.5, linestyles = 'dashed', color = 'm')
        plt.vlines(-45, 0, 1, lw=0.5, linestyles = 'dashed', color = 'm')
        plt.vlines(45, 0, 1, lw=0.5, linestyles = 'dashed', color = 'm')
        plt.vlines(135, 0, 1, lw=0.5, linestyles = 'dashed', color = 'm')

        plt.plot(x,y, 'b',lw=0.5)
        plt.fill_between(x, 0, y, color='b')


    else: # content = position        
        y = np.array(y, dtype = float)*360.0/4096
        x = np.array(range(len(y)), dtype = float)/20.0
        plt.plot(x,y, lw=0.6, c='b')#, color ='black')
        plt.xlabel("time [s]",fontsize=10, weight='bold')
        plt.ylabel("position [°]", fontsize=10, weight='bold')
        plt.title("trace")
        plt.ylim(-180,180)
        plt.xlim(0,120)
        #t = plt.text(-0.8, 0.9, 'family' )
        plt.Annotation('xx',(0.1,0.5))
        
        plt.xticks(np.arange(min(x), max(x)+1, 30),family='arial', fontsize=10, weight='normal',rotation=0) #  style='italic',
        plt.yticks(np.arange(-180, 180+1, 90), size=10)
        
        plt.fill_between(x, barp - barw/2, barp + barw/2, lw=0.5, edgecolor='0.3', facecolor='0.3')
        plt.fill_between(x, barp - 180 - barw/2, barp - 180 + barw/2, lw=0.5, edgecolor='0.3', facecolor='0.3' )

        plt.fill_between(x, -45, 45, hatch="x", edgecolor="m", facecolor='none',linewidth=0.0) #color="none",
        plt.fill_between(x, 135, 179, hatch="x", edgecolor="m", facecolor='none',linewidth=0.0) #color="none",
        plt.fill_between(x, -180, -135, hatch="x", edgecolor="m", facecolor='none',linewidth=0.0) #color="none", 
        
        plt.hlines(-135, 0, 120, lw=0.5, linestyles = 'dashed', color = 'm')
        plt.hlines(-45, 0, 120, lw=0.5, linestyles = 'dashed', color = 'm')
        plt.hlines(45, 0, 120, lw=0.5, linestyles = 'dashed', color = 'm')
        plt.hlines(135, 0, 120, lw=0.5, linestyles = 'dashed', color = 'm')

        plt.text(60,barw/2-135, 'bar width: '+str(barw)+'°', color='0.3', verticalalignment='bottom', horizontalalignment='left', size=10) # Horizontal alignment must be one of ('center', 'right', 'left')vertical alignment must be one of ('top', 'bottom', 'center', 'baseline')
        plt.text(60,0, 'heat quadrant', color='m', verticalalignment='center', horizontalalignment='left', size=10) 
        

     #,label="$sin(x)$",color="red",linewidth=2)
    plt.legend()
    plt.savefig(figfile + r".png" , dpi=fig.dpi, format = 'png')    
    #plt.show()

def get_filename():
    from tkinter import Tk, filedialog
    root = Tk()
    root.withdraw()
    filename = filedialog.askopenfilename(filetypes = [('DTA file', '*.DTA'),('INF file', '*.INF')], parent = root)
    if filename == '':
        messagebox()
    return filename

def currfiles(path, filetype = "DTA"):
    def getfiles(mypath , end = 'DTA'):
        """return a list of file name under directory that end with end """
        from os import listdir
        from os.path import isfile, join
        onlyfiles = [ f for f in listdir(mypath) if isfile(join(mypath,f)) ]
        #print(onlyfiles)
        return [x for x in onlyfiles if x.endswith(end.upper())]

    def div(lst):
        """return a dict of {name:[filenames]} by grouping the files by name(item[4]), e.g.,'S' for '0102S01A.DTA' """
        dic = {}
        for i in lst:
            name = i[-8]
            if name in dic:
                dic[name].append(i)                
            else:
                dic[name] = [i]                
        return dic
    return div(getfiles(path, end = filetype))

def checkmatch(dtas, infs):
    """return True or False: checking if the .DTA and .INF files is matching"""
       
    def lacking(dtas,infs):
        if len(dtas)>len(infs):
            for i in dtas:
                if not i in infs:
                    return i
        else:
            for i in infs:
                if not i in dtas:
                    return i
    def missing(dta, inf):
        if len(dta)>len(inf):
            for i in dta:
                if not i[:-4] + ".INF" in inf:
                    return i
        else:
            for i in inf:
                if not i[:-4] + ".DTA" in dta:
                    return i
    if len(dtas) != len(infs):
        print('Some file is lacking:', lacking(dtas,infs))
        return False
    else:
        for i in dtas:
            if len(dtas[i]) != len(infs[i]):
                print('Some file is missing:', missing(dtas[i], infs[i]))
                return False
            else:
                nfiles = len(dtas[i])
                for j in range(nfiles):
                    if dtas[i][j][:-4] != infs[i][j][:-4]:
                        print('file not match:', dtas[i][j], infs[i][j])
                        return False
        else:
            return True
                    
def get_filename():
    from tkinter import Tk, filedialog
    root = Tk()
    root.withdraw()
    filename = filedialog.askopenfilename(filetypes = [('DTA file', '*.DTA'),('INF file', '*.INF')], parent = root)
    if filename == '':
        messagebox('invalid file name')
    return filename

def photo78(folder, w=24, p=45):
    global n
    if checkmatch(currfiles(folder),currfiles(folder, filetype = 'inf')):
        import glob
        dta = glob.glob(folder+"\\*A.DTA" )
        print('read\n',dta)
    else:
        print('error reading files')
    for i in dta:
        print('\n\nprocessing', i)
        n += 1
        s7,s8 = read_psi(i)[6:8]        
        plot_trace2(s7, barw = w, barp = p, figfile = i[-12:-4]+' PI7') # '0403M02C.DTA'
        plot_trace2(s8, barw = w, barp = p, figfile = i[-12:-4]+' PI8')
      # plot_trace2(s8, figfile = i[-12:-4]+' PI8', content = 'trace')

def plot_mean_time_distri(folder):
    import matplotlib.pyplot as plt
    def groupfly(lst, ind):
        d = {}
        for i in lst:
            fly = i[ind]
            if fly in d:
                d[fly].append(i)
            else:
                d[fly] = [i]
        return d
    
    def readp(inf):
        import struct        
        return open(inf,'rb').read(1)[0] # struct.unpack('B', open(inf,'rb').read(1)[0])  # TypeError: 'int' does not support the buffer interface

    def dta2inf(dta):
        return dta[:-3] + 'INF'

    def grouppunish(Adtas):
        d = {'TaP':[],'TaS':[]}
        for i in Adtas:
            if readp(dta2inf(i)) == 194: # if inf[0]==194 ┬,else 'UpsideDown',# char
                d['TaP'].append(i)
            else:
                d['TaS'].append(i)
        return d        
            
    if checkmatch(currfiles(folder),currfiles(folder, filetype = 'inf')):
        import glob
        dta = groupfly(glob.glob(folder+"\\*A.DTA" ), -8)
##        for i in dta:
##            print(i, str(len(dta[i])),dta[i])
        
        import numpy as np
        for fly in dta:
            groupedta = grouppunish(dta[fly])
            for gp in groupedta:                                              
                dnames = groupedta[gp] # need to diff different flies, need to check consistency of files(file NofD)
                ndta = len(dnames)         
                timedistribution = np.array([timedistr(po) for po in (read_psi(dnames[0]))]) # 0*[]==[0]!!!!        
                print(fly,gp, '\n', dnames)
                print(ndta, '*', timedistribution.shape)  
    ##            input()
                for dt in range(1,ndta):  #len(timedistribution)):
                    print('\n\nprocessing', dt)                                                             
                    timedistribution += np.array([timedistr(po) for po in (read_psi(dnames[dt]))])  #IndexError: list index out of range
                    
                for i in range(len(timedistribution)):
    ##                fig, (ax1,ax2) = plt.figure()    ##
    ##                plt.ion()
    ##                plt.plot(timedistribution[i])    ##                
    ##                plt.plot(timedistr(timedistribution[i]))
    ##                plt.show()
                    
                    plot_trace2(np.array(timedistribution[i])/ndta, pun=gp, figfile=fly+str(ndta)+'PI'+str(i+1) + gp, content='time')
        
    else:
        print('error reading files')    

if __name__ == '__main__':
    print('Here it goes!')    
    cwd = os.getcwd()
    n = 0
    photo78(cwd, w=24, p=45)
    #print(os.path.basename(cwd))
    plot_mean_time_distri(cwd)
    input("press any key to finish:")
    print('finished', n, 'files')
